- name: Configure libvirt
  hosts: hypervisor
  user: root
  tasks:
    - name: Install ovmf for uefi support
      apt:
        name:
          - ovmf
          - libvirt-dev
          - pkg-config
          - python-dev
        state: latest

    - name: Check if VM exists
      shell: |
        virsh list --name --all| grep -q ^{{ item.name }}$
      register: check_vm
      with_items: "{{ ironic_metal }}"
      failed_when: false
      changed_when: check_vm.rc == 1


    - name: Start Virtual machine
      command: > 
        virt-install --name="{{ item.item.name }}"
                     --boot "hd,network,menu=on{% if item.item.uefi %},loader=/usr/share/OVMF/OVMF_CODE.fd,loader_ro=yes,loader_type=pflash,nvram_template=/usr/share/OVMF/OVMF_VARS.fd{% endif %}"
                     --vcpus="{{ item.item.cpu }}"
                     --ram="{{ item.item.memory }}"
                     --description="libvirt VM"
                     --controller="type=scsi"
                     --noautoconsole
                     --graphics vnc,password="cobbler"
                     --virt-type=kvm
                     --os-type=linux
        {% for dev in item.item.block_device_list %}
                     --disk pool="{{ item.item.block_pool }},size={{ dev.block_size }},device=disk,format=qcow2,sparse=true"
        {% endfor %}
        {% for dev in item.item.network_device_list %}
                     --network bridge="{{ dev.host_net_dev }}{% if dev.host_net_mac is defined %},mac={{ dev.host_net_mac }}{% endif %},model=virtio"
        {% endfor %}
      with_items: "{{ check_vm.results }}"
      when: item.rc == 1

      #when: virsh list --name --all| grep -q ^{{ item.name }}$
      tags: create_ironic

    - name: Install VirtualBMC package
      pip:
        name: "virtualbmc"
        extra_args: "--isolated"
    
    - name: Create VirtualBMC directories
      file:
        path: "{{ item }}"
        state: directory
        mode: 0750
        owner: root
        group: root
      with_items:
        - "/etc/virtualbmc"
        - "/var/log/virtualbmc"
    
    - name: Create VirtualBMC configuration file
      copy:
        mode: 0750
        dest: "/etc/virtualbmc/virtualbmc.conf"
        content: |
          [default]
          config_dir=/root/.vbmc
          [log]
          logfile=/var/log/virtualbmc/virtualbmc.log
          debug=True
          [ipmi]
          session_timout=20

 
    - name: Check vbmc IPs
      shell: >
        ip addr show {{ item.vbmc_bridge }} | grep {{ item.vbmc }} | wc -l
      with_items: "{{ ironic_metal }}"
      register: vm_ip_result

    - name: Create virtual IP's
      command: >
        ip addr add {{ item.item.vbmc }}/32 dev {{ item.item.vbmc_bridge }}
      with_items: "{{ vm_ip_result.results }}"
      when: item.stdout|int == 0

    
    - name: Create the Virtual BMCs
      command: "vbmc add --username ADMIN --password ADMIN --address={{ item.vbmc }} {{ item.name }}"
      args:
        creates: /root/.vbmc/{{ item.name }}/config
      with_items: "{{ ironic_metal }}"
    

    - name: Create service dir
      file:
        path: /usr/lib/systemd/system
        state: directory

    - name: Create the VirtualBMC systemd service
      copy:
        mode: 0664
        dest: "/usr/lib/systemd/system/virtualbmc@.service"
        content: |
          [Unit]
          Description=VirtualBMC %i service
          After=network.target
          [Service]
          Type=forking
          PIDFile=/root/.vbmc/%i/pid
          ExecStart=/usr/local/bin/vbmc start %i
          ExecStop=/usr/local/bin/vbmc stop %i
          Restart=always
          [Install]
          WantedBy=multi-user.target
   
 
    - name: Start the Virtual BMCs
      systemd:
        name: "virtualbmc@{{ item.name }}"
        state: started
        daemon_reload: yes
        enabled: true
      with_items: "{{ ironic_metal }}"
    
    
