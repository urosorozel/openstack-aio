lxc_container_backing_store: overlayfs

pip_get_pip_options: "--cert /etc/ssl/certs/ca-certificates.crt"
pip_install_options: "--cert /etc/ssl/certs/ca-certificates.crt"

lxc_container_cache_files:
  - src: "/etc/ssl/certs/ca-certificates.crt"
    dest: "/etc/ssl/certs/ca-certificates.crt"
{% if ca_cert | length > 0 %}
  - src: "/usr/local/share/ca-certificates/mitm.crt"
    dest: "/usr/local/share/ca-certificates/mitm.crt"
{% endif %}
# Overrides to get ironic working in aio
# Add DNS servers for inspector
ironic_inspector_dhcp_nameservers: "172.30.0.100,{{ ansible_default_ipv4.address }}"
ironic_inspector_dhcp_pool_range: 172.30.0.2 172.30.0.50
{% if ipa_image_server_ip %}
ipa_ramdisk_name: "ubuntu_ramdisk"
ipa_kernel_name: "ubuntu_kernel"
# Custom IPA image locaion
ironic_inspector_ipa_kernel_url: "http://{{ipa_image_server_ip}}/ubuntu_kernel"
ironic_inspector_ipa_kernel_sha256_url: "http://{{ipa_image_server_ip}}/ubuntu_kernel.sha256"
ironic_inspector_ipa_initrd_url: "http://{{ipa_image_server_ip}}/ubuntu_ramdisk"
ironic_inspector_ipa_initrd_sha256_url: "http://{{ipa_image_server_ip}}/ubuntu_ramdisk.sha256"
{% else %}
ipa_ramdisk_name: "tinyipa_ramdisk"
ipa_kernel_name: "tinyipa_kernel"
{% endif %}

{% raw %}
ironic_tftp_server_address: "{{ container_networks.ironic_address.address }}"
ironic_swift_endpoint: "http://{{ external_lb_vip_address }}:8080"
ironic_neutron_cleaning_network_uuid: "ironic-network"
ironic_neutron_provisioning_network_name: "ironic-network"
ironic_inspector_pxe_append_params: "systemd.journald.forward_to_console=yes console=tty0 console=ttyS0,115200n8 ipa-insecure=1 ipa-debug=1 ramdisk_size=3485760 ipa-inspection-collectors=default,extra-hardware,logs ipa-collect-lldp=1"
ironic_pxe_append_params: "systemd.journald.forward_to_console=yes console=tty0 console=ttyS0,115200n8 coreos.autologin ipa-insecure=1 ipa-debug=1"

# Enable ironic inspector
ironic_inspector_ironic_enable: True
# Enable ironic ipxe
ironic_httpboot_enabled: True
# Use swift as webserver
ironic_httpboot_use_swift: True
# enable extra processing hooks
ironic_inspector_processing_hooks: "ramdisk_error,root_disk_selection,scheduler,validate_interfaces,capabilities,pci_devices,raid_device,extra_hardware,local_link_connection,lldp_basic"
# Overcome issue with selfsigned certs and ipxe
swift_service_publicuri_proto: "http"
# Hack to modify only swift service
haproxy_extra_services:
  - service:
      haproxy_service_name: swift_proxy
      haproxy_backend_nodes: "{{ groups['swift_proxy'] | default([]) }}"
      haproxy_ssl: False
      haproxy_balance_alg: source
      haproxy_port: 8080
      haproxy_balance_type: http
      haproxy_backend_options:
        - "httpchk GET /healthcheck HTTP/1.0\\r\\nUser-agent:\\ osa-haproxy-healthcheck"
      haproxy_service_enabled: "{{ groups['swift_proxy'] is defined and groups['swift_proxy'] | length > 0 }}"

# Don't remove dnsmasq package from host
lxc_hosts_remove_distro_packages:

# Update scheduler filter (aggregates have to exist)
nova_scheduler_default_filters: "AggregateInstanceExtraSpecsFilter, RetryFilter, AvailabilityZoneFilter, RamFilter, AggregateRamFilter, ComputeFilter, AggregateCoreFilter, DiskFilter, AggregateDiskFilter, AggregateNumInstancesFilter, AggregateIoOpsFilter, ComputeCapabilitiesFilter, ImagePropertiesFilter, ServerGroupAntiAffinityFilter, ServerGroupAffinityFilter, NUMATopologyFilter"
{% endraw %}


# Custom post deploy
cloud_images:
  - bionic:
     name: "ubuntu-bionic"
     url: "http://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-amd64.img"
  - xenial:
     name: "ubuntu-xenial"
     url: "http://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-uefi1.img"
  - cirros:
     name: "cirros-0.3.6"
     url: "http://download.cirros-cloud.net/0.3.6/cirros-0.3.6-x86_64-disk.img"

ipa_images:
#   coreos:
#     kernel:
#       url: "http://tarballs.openstack.org/ironic-python-agent/coreos/files/coreos_production_pxe-stable-rocky.vmlinuz"
#       name: "coreos_kernel"
#     ramdisk:
#       url: "http://tarballs.openstack.org/ironic-python-agent/coreos/files/coreos_production_pxe_image-oem-stable-rocky.cpio.gz"
#       name: "coreos_ramdisk"
  tinyipa:
    kernel:
      url: "http://tarballs.openstack.org/ironic-python-agent/tinyipa/files/tinyipa-stable-rocky.vmlinuz"
      name: "tinyipa_kernel"
    ramdisk:
      url: "http://tarballs.openstack.org/ironic-python-agent/tinyipa/files/tinyipa-stable-rocky.gz"
      name: "tinyipa_ramdisk"
{% if ipa_image_server_ip %}
  ubuntu:
    kernel:
      name: "ubuntu_kernel"
      url: "http://{{ipa_image_server_ip}}/ubuntu_kernel"
    ramdisk:
      name: "ubuntu_ramdisk"
      url: "http://{{ipa_image_server_ip}}/ubuntu_ramdisk"
{% endif %}
