- name: Allow root password auth
  hosts: aio1
  tasks:
  - name: Edit ssh config PermitRootLogin
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: "^PermitRootLogin without-password"
      line: "PermitRootLogin yes"

  - name: Edit ssh config PasswordAuthentication
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: "^PasswordAuthentication no"
      line: "PasswordAuthentication yes"

- name: Post deploy
  hosts: utility_container
  tasks:
    - name: Update openrc for ironic API
      lineinfile:
        dest: /root/openrc
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - { regexp: '^# Define ironic API to support resource classes', line: '# Define ironic API to support resource classes' }
        - { regexp: '^export IRONIC_API_VERSION=latest', line: 'export IRONIC_API_VERSION=latest' }
        - { regexp: '^export OS_BAREMETAL_API_VERSION=1.46', line: 'export OS_BAREMETAL_API_VERSION=1.46' }

    - name: Copy post deploy play to utility  nodes
      copy:
        src: post/{{ item }}
        dest: /root/{{ item }}
      with_items:
        - enroll_ironic.py
        - ironic_nodes.yml
        - requirements.txt
        - post_deploy.sh

    - name: Instal requirements
      apt:
        name:
          - python-setuptools
          - curl

    - name: Remove PIP conf
      file:
        name: /root/.pip/pip.conf
        state: absent

    - name: Install pip
      apt:
        name: python-pip

    - name: Install virtualenv
      pip:
        name: virtualenv
        extra_args: --isolated --cert /etc/ssl/certs/ca-certificates.crt

    - name: pip install shade for ansible openstack module support
      pip:
        name: shade

    - name: Install requirements for enroll script
      pip:
        requirements: /root/requirements.txt
        virtualenv: /root/enroll
        extra_args: --isolated --cert /etc/ssl/certs/ca-certificates.crt

    - name: Get ironic hosts for baremetal server aggregate
      shell: |
        . /root/openrc;openstack host list| grep internal | grep ironic-compute | awk '{ print $2}'
      args:
        chdir: /root
      register: ironic_hosts

    - name: Add host aggregate for baremetal server
      os_nova_host_aggregate:
        cloud: default
        state: present
        name: baremetal-hosts
        hosts:  "{{ ironic_hosts.stdout_lines }}"
        validate_certs: False
        metadata:
          baremetal: 'true'

    - name: Add host aggregate for virtual servers
      os_nova_host_aggregate:
        cloud: default
        state: present
        name: virtual-hosts
        hosts:
          - aio1
        validate_certs: False
        metadata:
          baremetal: 'false'

    - name: Add public network
      os_network:
        cloud: default
        state: present
        name: public-flat-network
        provider_physical_network: flat
        provider_network_type: flat
        external: true
        validate_certs: False

    - name: Add ironic network
      os_network:
        cloud: default
        state: present
        name: ironic-network
        provider_physical_network: ironic
        provider_network_type: flat
        external: true
        validate_certs: False

    - name: Add public flat subnet on br-vlan
      os_subnet:
        cloud: default
        state: present
        network_name: public-flat-network
        name: public-flat-subnet
        cidr: 172.29.248.0/22
        allocation_pool_start: 172.29.248.150
        allocation_pool_end: 172.29.248.200
        dns_nameservers:
           - 8.8.8.7
           - 8.8.8.8
        validate_certs: False

    - name: Add ironic subnet
      os_subnet:
        cloud: default
        state: present
        network_name: ironic-network
        name: ironic-subnet
        cidr: 172.30.0.0/22
        allocation_pool_start: 172.30.0.101
        allocation_pool_end: 172.30.3.254
        dns_nameservers:
           - 172.30.0.100
           - 192.168.10.100
        validate_certs: False


    - name: Add private network
      os_network:
        cloud: default
        state: present
        name: private
        #provider_physical_network: flat
        #provider_network_type: flat
        validate_certs: False


    - name: Add private subnet
      os_subnet:
        cloud: default
        state: present
        network_name: private
        name: private-subnet
        cidr: 192.168.74.0/28
        enable_dhcp: True
        #gateway_ip: 192.168.74.1
        dns_nameservers:
           - 8.8.8.7
           - 8.8.8.8
        validate_certs: False
        # router module fails on second run :/
        # https://github.com/ansible/ansible/issues/29903
        #register: subnet_added

    - name: Add router to route private to public
      os_router:
        cloud: default
        state: present
        name: router1
        project: admin
        network: public-flat-network
        validate_certs: False
        external_fixed_ips:
          - subnet: public-flat-subnet
            ip: 172.29.248.101
        interfaces:
          - private-subnet
      ignore_errors: yes
      #when: subnet_added.changed

#    - name: Get admin default SG id
#      shell: |
#        . /root/openrc;openstack security group list | grep $(openstack project list | grep admin | awk '{print $2}') | grep default | awk '{print $2}'
#      register: sec_group
    - name: Create SG for servers ssh/icmp
      os_security_group:
        cloud: default
        validate_certs: False
        state: present
        name: server_ssh_icmp
        description: security group for servers

    - name: Add SSH rule to default SG
      os_security_group_rule:
        cloud: default
        validate_certs: False
        security_group: server_ssh_icmp
        protocol: tcp
        port_range_min: 22
        port_range_max: 22

    - name: Add ICMP rule to default SG
      os_security_group_rule:
        cloud: default
        validate_certs: False
        security_group: server_ssh_icmp
        protocol: icmp
        remote_ip_prefix: 0.0.0.0/0

    - name: Update quotas
      os_quota:
        cloud: default
        name: "admin"
        validate_certs: False
        cores: -1
        fixed_ips: -1
        floating_ips: -1
        floatingip: -1
        gigabytes: -1
        injected_files: -1
        instances: -1
        key_pairs: -1
        ram: -1
        security_group_rule: -1
        security_group: -1
        volumes: -1


    - name: Download cloud images
      get_url:
        url: "{{ item.value.url }}"
        dest: "/root/{{ item.value.name }}"
      with_dict: "{{ cloud_images }}"
      tags:
        - download-cloud

    - name: Download ipa images
      get_url:
        url: "{{ ipa_images | json_query(item[0] + '.' + item[1] + '.url') }}"
        dest: "/root/{{ ipa_images | json_query(item[0] + '.' + item[1] + '.name') }}"
      with_nested:
        - "{{ ipa_images }}"
        - ['kernel', 'ramdisk']
      tags:
        - download-ipa

    - name: Upload cloud images
      os_image:
        cloud: default
        validate_certs: False
        name: "{{ item.value.name }}"
        container_format: bare
        disk_format: qcow2
        state: present
        filename: "/root/{{ item.value.name }}"
        properties:
          cpu_arch: x86_64
      with_dict: "{{ cloud_images }}"

    - name: Remove cloud images
      file:
        path: "/root/{{ item.value.name }}"
        state: absent
      with_dict: "{{ cloud_images }}"

    - name: Upload ipa images
      os_image:
        cloud: default
        validate_certs: False
        name: "{{ ipa_images | json_query(item[0] + '.' + item[1] + '.name') }}"
        container_format: aki
        disk_format: aki
        state: present
        filename: "/root/{{ ipa_images | json_query(item[0] + '.' + item[1] + '.name') }}"
      with_nested:
        - "{{ ipa_images }}"
        - ['kernel', 'ramdisk']

    - name: Remove ipa images
      file:
        path: "/root/{{ ipa_images | json_query(item[0] + '.' + item[1] + '.name') }}"
        state: absent
      with_nested:
        - "{{ ipa_images }}"
        - ['kernel', 'ramdisk']

    - name: Create flavor with metadata for virtual
      os_nova_flavor:
        cloud: default
        validate_certs: False
        state: present
        name: virtual-flavor
        ram: 256
        vcpus: 1
        disk: 1
        extra_specs:
          "baremetal": "false"

    - name: Create flavor with metadata for baremetal
      os_nova_flavor:
        cloud: default
        validate_certs: False
        state: present
        name: baremetal-flavor
        ram: 1024
        vcpus: 1
        disk: 10
        extra_specs:
          "baremetal": "true"
          "resources:CUSTOM_BAREMETAL_SMALL": "1"

    - name: Create SSH keypair
      os_keypair:
        validate_certs: False
        cloud: default
        state: present
        name: osa_key
      register: keypair

    - debug: var=keypair
    - name: Write private key
      copy:
        content: "{{ keypair.key.private_key }}"
        dest: /root/.ssh/osa_key
        mode: 0400
      when: keypair.changed

    - name: Write public key
      copy:
        content: "{{ keypair.key.public_key }}"
        dest: /root/.ssh/osa_key.pub
        mode: 0644
      when: keypair.changed

    - name: Gather facts about a previously created image named ubuntu_ramdisk
      os_image_facts:
        cloud: default
        validate_certs: False
        image: "{{ ipa_ramdisk_name }}"
      register: ipa_ramdisk


    - name: Gather facts about a previously created image named ubuntu_kernel
      os_image_facts:
        cloud: default
        validate_certs: False
        image: "{{ ipa_kernel_name }}"
      register: ipa_kernel

    - name: Output introspection rules
      template:
        src: post/rules.json.j2
        dest: rules.json

    - name: Purge and add introspection rules
      shell: |
        . /root/openrc
        openstack baremetal introspection  rule purge
        openstack baremetal introspection  rule import rules.json
      args:
        chdir: /root

    - name: Make sure swift container has temp key added
      command: |
        swift  --os-username "service:glance" --os-password "{{ glance_service_password }}" --os-auth-url http://172.29.236.100:5000/v3 --os-identity-api-version 3 post -m "temp-url-key:{{ ironic_swift_temp_url_secret_key }}"

- name: Write lxc networkd files
  hosts: aio1
  vars_files:
    - /etc/ansible/roles/lxc_hosts/defaults/main.yml
  tags:
    - fix-lxcbr0
  tasks:
    - name: Remove  /etc/network/interfaces.d/lxc-net-bridge.cfg
      file:
        path:  /etc/network/interfaces.d/lxc-net-bridge.cfg
        state: absent

    - name: Write network
      blockinfile:
        path: "/etc/systemd/network/{{ lxc_net_bridge }}.network"
        create: yes
        block: |
          [Match]
          Name={{ lxc_net_bridge }}

          [Network]
          Address={{ (lxc_net_address ~ '/' ~ lxc_net_netmask) | ipaddr('cidr') }}
          {% if lxc_net_gateway is not none %}
          Gateway={{ lxc_net_gateway }}
          {% endif %}
          ConfigureWithoutCarrier=yes

    - name: Write netdev
      blockinfile:
        path: "/etc/systemd/network/{{ lxc_net_bridge }}.netdev"
        create: yes
        block: |
          [NetDev]
          Name={{ lxc_net_bridge }}
          Kind=bridge

          [Bridge]
          ForwardDelaySec=0
          HelloTimeSec=2
          MaxAgeSec=12
          STP=off

- name: Update all containers
  hosts: all,!aio1
  tasks:
    - name: Fix LXC resolved nameserver
      ini_file:
        path: /etc/systemd/resolved.conf
        section: Resolve
        option: "DNS"
        value: 10.255.255.1

#    - name: Disable and mask resolved
#      systemd:
#        name: systemd-resolved
#        enabled: yes
#        masked: no
#        started: yes
- name: Update all containers
  hosts: ironic_api_container
  tasks:
    - name: Copy ipxe_config.template to ironic api container
      copy:
        src: /opt/openstack-ansible/playbooks/post/ipxe_config.template
        dest: /openstack/venvs/ironic-18.1.4/lib/python2.7/site-packages/ironic/drivers/modules/ipxe_config.template
  tags:
    - ipxe-config

- name: Post deploy
  hosts: utility_container[0]
  tasks:
    - name: Run post_deploy.sh
      shell: |
        bash post_deploy.sh
      args:
        chdir: /root/
